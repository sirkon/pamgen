// Code generated by pamgen version (devel). DO NOT EDIT.

package testing

import (
	"github.com/golang/mock/gomock"
	"github.com/sirkon/deepequal"
	"io"
	"reflect"
)

// InterfaceMock interface github.com/sirkon/pamgen/internal/testing.Interface mock
type InterfaceMock struct {
	ctrl     *gomock.Controller
	recorder *InterfaceMockRecorder
}

// InterfaceMockRecorder records expected calls of github.com/sirkon/pamgen/internal/testing.Interface
type InterfaceMockRecorder struct {
	mock *InterfaceMock
}

// NewInterfaceMock creates InterfaceMock instance
func NewInterfaceMock(ctrl *gomock.Controller) *InterfaceMock {
	mock := &InterfaceMock{
		ctrl: ctrl,
	}
	mock.recorder = &InterfaceMockRecorder{mock: mock}
	return mock
}

// EXPECT returns expected calls recorder
func (m *InterfaceMock) EXPECT() *InterfaceMockRecorder {
	return m.recorder
}

// Fprintf method to implement github.com/sirkon/pamgen/internal/testing.Interface
func (m *InterfaceMock) Fprintf(dst io.Reader, format string, a ...interface{}) (r int, err error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dst, format}
	for _, item := range a {
		varargs = append(varargs, item)
	}
	ret := m.ctrl.Call(m, "Fprintf", varargs...)
	r, _ = ret[0].(int)
	err, _ = ret[1].(error)
	return r, err
}

// Fprintf register expected call of method github.com/sirkon/pamgen/internal/testing.Interface.Fprintf
func (mr *InterfaceMockRecorder) Fprintf(dst, format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dst, format}, a...)

	for i, v := range varargs {
		if _, ok := v.(gomock.Matcher); ok {
			continue
		}

		varargs[i] = deepequal.NewEqMatcher(v)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintf", reflect.TypeOf((*InterfaceMock)(nil).Fprintf), varargs...)
}

// Just method to implement github.com/sirkon/pamgen/internal/testing.Interface
func (m *InterfaceMock) Just(arg string, arg2 int) (r string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Just", arg, arg2)
	r, _ = ret[0].(string)
	return r
}

// Just register expected call of method github.com/sirkon/pamgen/internal/testing.Interface.Just
func (mr *InterfaceMockRecorder) Just(arg, arg2 interface{}) *gomock.Call {
	if arg != nil {
		if _, ok := arg.(gomock.Matcher); !ok {
			arg = deepequal.NewEqMatcher(arg)
		}
	}

	if arg2 != nil {
		if _, ok := arg2.(gomock.Matcher); !ok {
			arg2 = deepequal.NewEqMatcher(arg2)
		}
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Just", reflect.TypeOf((*InterfaceMock)(nil).Just), arg, arg2)
}

// Printf method to implement github.com/sirkon/pamgen/internal/testing.Interface
func (m *InterfaceMock) Printf(arg string, arg2 ...interface{}) (r int, err error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg}
	for _, item := range arg2 {
		varargs = append(varargs, item)
	}
	ret := m.ctrl.Call(m, "Printf", varargs...)
	r, _ = ret[0].(int)
	err, _ = ret[1].(error)
	return r, err
}

// Printf register expected call of method github.com/sirkon/pamgen/internal/testing.Interface.Printf
func (mr *InterfaceMockRecorder) Printf(arg interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg}, arg2...)

	for i, v := range varargs {
		if _, ok := v.(gomock.Matcher); ok {
			continue
		}

		varargs[i] = deepequal.NewEqMatcher(v)
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*InterfaceMock)(nil).Printf), varargs...)
}
